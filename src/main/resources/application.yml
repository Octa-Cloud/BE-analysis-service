server:
  port: 8080

spring:
  kafka:
    bootstrap-servers: pkc-gq2xn.asia-northeast3.gcp.confluent.cloud:9092
    properties:
      security.protocol: SASL_SSL
      sasl.mechanism: PLAIN
      sasl.jaas.config: >
        org.apache.kafka.common.security.plain.PlainLoginModule required
        username="AGQDVMNB6DVPXFX7"
        password="cfltBaumbQnzwuPIRS3E8S1MNrfqrsb9LXzDvUBPBrP0YQRUTfBqdD2nOKmzUXFw";
    producer:
      acks: all
      retries: 3
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      enable-auto-commit: false
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    admin:
      auto-create: false
      fail-fast: true

  datasource:
    username: ${RDB_USERNAME}
    url: ${RDB_URL}
    password: ${RDB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      connection-isolation: READ_COMMITTED
      connection-init-sql: |
        SET SESSION binlog_format='ROW';
        SET SESSION expire_logs_days=7;
        SET SESSION transaction_isolation='READ-COMMITTED';
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB

  data:
    redis:
      #host: ${SPRING_DATA_REDIS_HOST:localhost}
      #port: ${SPRING_DATA_REDIS_PORT:6379}
      host: ${SPRING_REDIS_HOST:localhost}
      port: ${SPRING_REDIS_PORT:6379}

  jpa:
    hibernate:
      ddl-auto: update
    database: mysql
    database-platform: org.hibernate.dialect.MySQL8Dialect
    open-in-view: false

jwt-properties:
  key: ${JWT_KEY:KItFWMZokpiSj6ABi42XJpNWbBqUJ4UT3mhLrXk//IjI2TgQy2Bk+2KrCk4cQDl8oFsSYH9Gr++Lqr2w6CYJnQ==}
  access-token-subject: AccessToken
  token-header: Authorization
  bearer: Bearer
  id: id

logging:
  level:
    com.project.analysis.global.security.TokenProvider: DEBUG
    com.project.analysis.global.resolver.CurrentUserArgumentResolver: DEBUG
    com.project.analysis: DEBUG
    root: INFO
    org.springframework: DEBUG
    org.springframework.web: DEBUG
    org.springframework.boot: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql: TRACE

springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    groups-order: DESC
    tags-sorter: alpha
    operations-sorter: method
    enabled: true
  paths-to-match:
    - /api/**

ai-analysis:
  model:
    base-url: ${AI_ANALYSIS_MODEL_BASE_URL:http://localhost:8000}
    timeout: ${AI_ANALYSIS_MODEL_TIMEOUT:30000}
    retry:
      max-attempts: ${AI_ANALYSIS_MODEL_RETRY_MAX_ATTEMPTS:3}
      delay: ${AI_ANALYSIS_MODEL_RETRY_DELAY:1000}

management:
  endpoints:
    web:
      exposure:
        include: health,info,liveness,readiness,prometheus
  endpoint:
    health:
      show-details: always
    liveness:
      enabled: true
    readiness:
      enabled: true
  metrics:
    tags:
      application: analysis-service
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99